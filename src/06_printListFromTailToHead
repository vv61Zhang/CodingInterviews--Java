// Solution1: Use stack

import java.util.Stack;
import java.util.ArrayList;
public class Solution {
    public ArrayList<Integer> printListFromTailToHead(ListNode listNode){
        Stack<Integer> stack = new Stack<Integer>();
        ArrayList<Integer> ans = new ArrayList<>();
        if(listNode == null) return ans;
        while(listNode!=null){
            stack.push(listNode.val);
            listNode = listNode.next;
        }
        while(! stack.isEmpty()){
            ans.add(stack.pop());
        }
        return ans;
    }
}

//Solution2: Recursion
import java.util.ArrayList;
public class Solution {
    //DON'T create the output variable inside the recursion function!!
    ArrayList<Integer> ans = new ArrayList<Integer>();
    public ArrayList<Integer> printListFromTailToHead(ListNode listNode){
        
        if (listNode!=null){
            printListFromTailToHead(listNode.next);
            ans.add(listNode.val);
        }
        return ans;
    }
}
